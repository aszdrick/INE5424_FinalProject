
semaphore_application.elf:     file format elf32-littlenios2
semaphore_application.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000005a0 memsz 0x000005a0 flags r-x
    LOAD off    0x000015c0 vaddr 0x000085c0 paddr 0x000085cc align 2**12
         filesz 0x0000000c memsz 0x0000000c flags rw-
    LOAD off    0x000015d8 vaddr 0x000085d8 paddr 0x000085d8 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000564  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  00008584  00008584  00001584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       0000000c  000085c0  000085cc  000015c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000000c  000085d8  000085d8  000015d8  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001e8  00000000  00000000  000015f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000002d3  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000ec0  00000000  00000000  00001ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000850  00000000  00000000  00002973  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001f49  00000000  00000000  000031c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000274  00000000  00000000  0000510c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000637  00000000  00000000  00005380  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000340  00000000  00000000  000059b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000030  00000000  00000000  00005cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000020  00000000  00000000  00005d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00006c1e  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  00006c21  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00006c26  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00006c27  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000009  00000000  00000000  00006c28  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000009  00000000  00000000  00006c31  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000009  00000000  00000000  00006c3a  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000a  00000000  00000000  00006c43  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000046  00000000  00000000  00006c4d  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0002a2a8  00000000  00000000  00006c93  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
00008584 l    d  .rodata	00000000 .rodata
000085c0 l    d  .rwdata	00000000 .rwdata
000085d8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00008068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 Semaphore.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 alt_load.c
00008224 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 strlen.c
000082b0 g     F .text	0000002c alt_main
000085cc g       *ABS*	00000000 __flash_rwdata_start
00008070 g     F .text	00000004 _ZN9SemaphoreC1Ej
00008470 g     F .text	00000038 alt_putstr
000085c8 g     O .rwdata	00000004 jtag_uart
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
000085dc g     O .bss	00000004 alt_argv
000105c0 g       *ABS*	00000000 _gp
0000852c g     F .text	00000038 alt_icache_flush
000085e4 g       *ABS*	00000000 __bss_end
00008500 g     F .text	00000018 alt_dcache_flush_all
000085cc g       *ABS*	00000000 __ram_rwdata_end
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory
0000807c g     F .text	00000004 _ZN9Semaphore1pEv
000085c0 g       *ABS*	00000000 __ram_rodata_end
000085e4 g       *ABS*	00000000 end
00010000 g       *ABS*	00000000 __alt_stack_pointer
000084cc g     F .text	00000034 altera_avalon_jtag_uart_write
000082dc g     F .text	00000144 alt_printf
00008020 g     F .text	0000004c _start
000084a8 g     F .text	00000004 alt_sys_init
00008078 g     F .text	00000004 _ZN9SemaphoreD1Ev
000085c0 g       *ABS*	00000000 __ram_rwdata_start
00008584 g       *ABS*	00000000 __ram_rodata_start
000085e4 g       *ABS*	00000000 __alt_stack_base
000085d8 g       *ABS*	00000000 __bss_start
00008084 g     F .text	000001a0 main
000085e0 g     O .bss	00000004 alt_envp
00008584 g       *ABS*	00000000 __flash_rodata_start
000084ac g     F .text	00000020 alt_irq_init
000085c0 g     O .rwdata	00000008 _ZN9Semaphore4BASEE
000085d8 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008074 g     F .text	00000004 _ZN9SemaphoreD2Ev
000085cc g       *ABS*	00000000 _edata
000085e4 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008080 g     F .text	00000004 _ZN9Semaphore1vEv
00008524 g     F .text	00000008 altera_nios2_qsys_irq_init
0000801c g       .entry	00000000 exit
00010000 g       *ABS*	00000000 __alt_data_end
0000801c g       .entry	00000000 _exit
00008564 g     F .text	00000020 strlen
0000806c g     F .text	00000004 _ZN9SemaphoreC2Ej
00008420 g     F .text	00000050 alt_putchar
00008518 g     F .text	0000000c alt_icache_flush_all
00008244 g     F .text	0000006c alt_load



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08600814 	ori	at,at,32800
    jmp r1
    8018:	0800683a 	jmp	at

0000801c <_exit>:
    801c:	00000000 	call	0 <__alt_mem_onchip_memory-0x8000>

Disassembly of section .text:

00008020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    8020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    8024:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    8028:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    802c:	00bffd16 	blt	zero,r2,8024 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8030:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8034:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    8038:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    803c:	d6817014 	ori	gp,gp,1472
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8040:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8044:	10a17614 	ori	r2,r2,34264

    movhi r3, %hi(__bss_end)
    8048:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    804c:	18e17914 	ori	r3,r3,34276

    beq r2, r3, 1f
    8050:	10c00326 	beq	r2,r3,8060 <_start+0x40>

0:
    stw zero, (r2)
    8054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    805c:	10fffd36 	bltu	r2,r3,8054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8060:	00082440 	call	8244 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8064:	00082b00 	call	82b0 <alt_main>

00008068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8068:	003fff06 	br	8068 <alt_after_alt_main>

0000806c <_ZN9SemaphoreC2Ej>:
	//	∗sem_cmd = (0x20000000 | v);
	//	sem_id = (∗sem_thr & 0x000000FF);

	//	CPU::int_enable();

}
    806c:	f800283a 	ret

00008070 <_ZN9SemaphoreC1Ej>:
    8070:	f800283a 	ret

00008074 <_ZN9SemaphoreD2Ev>:
	//	CPU::int_disable();
	//
	//	∗sem_cmd = (0x40000000 | (sem_id << 16));
	//
	//	CPU::int_enable();
}
    8074:	f800283a 	ret

00008078 <_ZN9SemaphoreD1Ev>:
    8078:	f800283a 	ret

0000807c <_ZN9Semaphore1pEv>:
//
//	if (status & STAT_BLOCK) {
//		// Block Current Thread
//		thr−>suspend();
//	}
}
    807c:	f800283a 	ret

00008080 <_ZN9Semaphore1vEv>:
//	}
//
//	if (status & STAT_RESUME) {
//		thr −>resume();
//	}
}
    8080:	f800283a 	ret

00008084 <main>:
//#include <stdio.h>
#include "sys/alt_stdio.h"
#include "system.h"
#include "/home/aszdrick/altera/13.0sp1/nios2eds/components/altera_nios2/HAL/inc/io.h"

int main() {
    8084:	defffc04 	addi	sp,sp,-16
	alt_putstr("Hello from Nios II!\n");
    8088:	01000074 	movhi	r4,1
    808c:	21216104 	addi	r4,r4,-31356
//#include <stdio.h>
#include "sys/alt_stdio.h"
#include "system.h"
#include "/home/aszdrick/altera/13.0sp1/nios2eds/components/altera_nios2/HAL/inc/io.h"

int main() {
    8090:	dfc00315 	stw	ra,12(sp)
    8094:	dc800215 	stw	r18,8(sp)
    8098:	dc400115 	stw	r17,4(sp)
    809c:	dc000015 	stw	r16,0(sp)
	alt_putstr("Hello from Nios II!\n");
    80a0:	00084700 	call	8470 <alt_putstr>

	// Offset 0 = command, 0x1 = creation
	IOWR_32DIRECT(SEMAPHORE_BASE, 0, 0x1);
    80a4:	00800044 	movi	r2,1
    80a8:	00c00074 	movhi	r3,1
    80ac:	18c40004 	addi	r3,r3,4096
    80b0:	18800035 	stwio	r2,0(r3)
	// Offset 4 = address, id of semaphore, not needed by creation

	// Offset 8 = data_in, size of semaphore on creation
	IOWR_32DIRECT(SEMAPHORE_BASE , 8, 0x1);
    80b4:	18c00204 	addi	r3,r3,8
    80b8:	18800035 	stwio	r2,0(r3)

	int j = 0;
	do {
		// Ofsset 0 = status
		j = IORD_32DIRECT(SEMAPHORE_BASE, 0);
    80bc:	04400074 	movhi	r17,1
    80c0:	8c440004 	addi	r17,r17,4096
    80c4:	8c000037 	ldwio	r16,0(r17)
		// Ofsset 4 = data_out, id of semaphore on creation
		alt_printf("first\n");
    80c8:	01000074 	movhi	r4,1
    80cc:	21216704 	addi	r4,r4,-31332
    80d0:	00082dc0 	call	82dc <alt_printf>
		alt_printf("%x\n", j);
    80d4:	800b883a 	mov	r5,r16

	// Offset 8 = data_in, size of semaphore on creation
	IOWR_32DIRECT(SEMAPHORE_BASE , 8, 0x1);

	int j = 0;
	do {
    80d8:	8400004c 	andi	r16,r16,1
		// Ofsset 0 = status
		j = IORD_32DIRECT(SEMAPHORE_BASE, 0);
		// Ofsset 4 = data_out, id of semaphore on creation
		alt_printf("first\n");
		alt_printf("%x\n", j);
    80dc:	01000074 	movhi	r4,1
    80e0:	21216904 	addi	r4,r4,-31324

	// Offset 8 = data_in, size of semaphore on creation
	IOWR_32DIRECT(SEMAPHORE_BASE , 8, 0x1);

	int j = 0;
	do {
    80e4:	8021003a 	cmpeq	r16,r16,zero
		// Ofsset 0 = status
		j = IORD_32DIRECT(SEMAPHORE_BASE, 0);
		// Ofsset 4 = data_out, id of semaphore on creation
		alt_printf("first\n");
		alt_printf("%x\n", j);
    80e8:	00082dc0 	call	82dc <alt_printf>

	// Offset 8 = data_in, size of semaphore on creation
	IOWR_32DIRECT(SEMAPHORE_BASE , 8, 0x1);

	int j = 0;
	do {
    80ec:	803ff31e 	bne	r16,zero,80bc <main+0x38>
		j = IORD_32DIRECT(SEMAPHORE_BASE, 0);
		// Ofsset 4 = data_out, id of semaphore on creation
		alt_printf("first\n");
		alt_printf("%x\n", j);
	} while ((j & 0x1) != 1);
	int sid = IORD_32DIRECT(SEMAPHORE_BASE, 4);
    80f0:	04000074 	movhi	r16,1
    80f4:	84040104 	addi	r16,r16,4100
    80f8:	84800037 	ldwio	r18,0(r16)
	alt_printf("%x\n", sid);
    80fc:	01000074 	movhi	r4,1
    8100:	21216904 	addi	r4,r4,-31324
    8104:	900b883a 	mov	r5,r18
    8108:	00082dc0 	call	82dc <alt_printf>
	//i = (i+1) % 0xffff;

	IOWR_32DIRECT(SEMAPHORE_BASE, 0, 0x3);
    810c:	008000c4 	movi	r2,3
    8110:	88800035 	stwio	r2,0(r17)
	IOWR_32DIRECT(SEMAPHORE_BASE, 4, sid);
    8114:	84800035 	stwio	r18,0(r16)
	IOWR_32DIRECT(SEMAPHORE_BASE, 8, 0x4);
    8118:	00c00104 	movi	r3,4
    811c:	00800074 	movhi	r2,1
    8120:	10840204 	addi	r2,r2,4104
    8124:	10c00035 	stwio	r3,0(r2)

	j = 0;
	do {
		// Ofsset 0 = status
		j = IORD_32DIRECT(SEMAPHORE_BASE, 0);
    8128:	04400074 	movhi	r17,1
    812c:	8c440004 	addi	r17,r17,4096
    8130:	8c000037 	ldwio	r16,0(r17)
		// Ofsset 4 = data_out, id of semaphore on creation
		alt_printf("second\n");
    8134:	01000074 	movhi	r4,1
    8138:	21216a04 	addi	r4,r4,-31320
    813c:	00082dc0 	call	82dc <alt_printf>
		alt_printf("%x\n", j);
    8140:	800b883a 	mov	r5,r16
	IOWR_32DIRECT(SEMAPHORE_BASE, 0, 0x3);
	IOWR_32DIRECT(SEMAPHORE_BASE, 4, sid);
	IOWR_32DIRECT(SEMAPHORE_BASE, 8, 0x4);

	j = 0;
	do {
    8144:	8400004c 	andi	r16,r16,1
		// Ofsset 0 = status
		j = IORD_32DIRECT(SEMAPHORE_BASE, 0);
		// Ofsset 4 = data_out, id of semaphore on creation
		alt_printf("second\n");
		alt_printf("%x\n", j);
    8148:	01000074 	movhi	r4,1
    814c:	21216904 	addi	r4,r4,-31324
	IOWR_32DIRECT(SEMAPHORE_BASE, 0, 0x3);
	IOWR_32DIRECT(SEMAPHORE_BASE, 4, sid);
	IOWR_32DIRECT(SEMAPHORE_BASE, 8, 0x4);

	j = 0;
	do {
    8150:	8021003a 	cmpeq	r16,r16,zero
		// Ofsset 0 = status
		j = IORD_32DIRECT(SEMAPHORE_BASE, 0);
		// Ofsset 4 = data_out, id of semaphore on creation
		alt_printf("second\n");
		alt_printf("%x\n", j);
    8154:	00082dc0 	call	82dc <alt_printf>
	IOWR_32DIRECT(SEMAPHORE_BASE, 0, 0x3);
	IOWR_32DIRECT(SEMAPHORE_BASE, 4, sid);
	IOWR_32DIRECT(SEMAPHORE_BASE, 8, 0x4);

	j = 0;
	do {
    8158:	803ff31e 	bne	r16,zero,8128 <main+0xa4>
		// Ofsset 4 = data_out, id of semaphore on creation
		alt_printf("second\n");
		alt_printf("%x\n", j);
	} while ((j & 0x1) != 1);

	IOWR_32DIRECT(SEMAPHORE_BASE, 0, 0x3);
    815c:	008000c4 	movi	r2,3
    8160:	88800035 	stwio	r2,0(r17)
	IOWR_32DIRECT(SEMAPHORE_BASE, 4, sid);
    8164:	00800074 	movhi	r2,1
    8168:	10840104 	addi	r2,r2,4100
    816c:	14800035 	stwio	r18,0(r2)
	IOWR_32DIRECT(SEMAPHORE_BASE, 8, 0x7);
    8170:	00c001c4 	movi	r3,7
    8174:	10800104 	addi	r2,r2,4
    8178:	10c00035 	stwio	r3,0(r2)

	j = 0;
	do {
		// Ofsset 0 = status
		j = IORD_32DIRECT(SEMAPHORE_BASE, 0);
    817c:	04400074 	movhi	r17,1
    8180:	8c440004 	addi	r17,r17,4096
    8184:	8c000037 	ldwio	r16,0(r17)
		// Ofsset 4 = data_out, id of semaphore on creation
		alt_printf("third\n");
    8188:	01000074 	movhi	r4,1
    818c:	21216c04 	addi	r4,r4,-31312
    8190:	00082dc0 	call	82dc <alt_printf>
		alt_printf("%x\n", j);
    8194:	800b883a 	mov	r5,r16
	IOWR_32DIRECT(SEMAPHORE_BASE, 0, 0x3);
	IOWR_32DIRECT(SEMAPHORE_BASE, 4, sid);
	IOWR_32DIRECT(SEMAPHORE_BASE, 8, 0x7);

	j = 0;
	do {
    8198:	8400004c 	andi	r16,r16,1
		// Ofsset 0 = status
		j = IORD_32DIRECT(SEMAPHORE_BASE, 0);
		// Ofsset 4 = data_out, id of semaphore on creation
		alt_printf("third\n");
		alt_printf("%x\n", j);
    819c:	01000074 	movhi	r4,1
    81a0:	21216904 	addi	r4,r4,-31324
	IOWR_32DIRECT(SEMAPHORE_BASE, 0, 0x3);
	IOWR_32DIRECT(SEMAPHORE_BASE, 4, sid);
	IOWR_32DIRECT(SEMAPHORE_BASE, 8, 0x7);

	j = 0;
	do {
    81a4:	8021003a 	cmpeq	r16,r16,zero
		// Ofsset 0 = status
		j = IORD_32DIRECT(SEMAPHORE_BASE, 0);
		// Ofsset 4 = data_out, id of semaphore on creation
		alt_printf("third\n");
		alt_printf("%x\n", j);
    81a8:	00082dc0 	call	82dc <alt_printf>
	IOWR_32DIRECT(SEMAPHORE_BASE, 0, 0x3);
	IOWR_32DIRECT(SEMAPHORE_BASE, 4, sid);
	IOWR_32DIRECT(SEMAPHORE_BASE, 8, 0x7);

	j = 0;
	do {
    81ac:	803ff31e 	bne	r16,zero,817c <main+0xf8>
		// Ofsset 4 = data_out, id of semaphore on creation
		alt_printf("third\n");
		alt_printf("%x\n", j);
	} while ((j & 0x1) != 1);

	IOWR_32DIRECT(SEMAPHORE_BASE, 0, 0x4);
    81b0:	00800104 	movi	r2,4
    81b4:	88800035 	stwio	r2,0(r17)
	IOWR_32DIRECT(SEMAPHORE_BASE, 4, sid);
    81b8:	00800074 	movhi	r2,1
    81bc:	10840104 	addi	r2,r2,4100
    81c0:	14800035 	stwio	r18,0(r2)
	IOWR_32DIRECT(SEMAPHORE_BASE, 8, 0x0);
    81c4:	10800104 	addi	r2,r2,4
    81c8:	10000035 	stwio	zero,0(r2)
    81cc:	0023883a 	mov	r17,zero

	j = 0;
	int resumed = 0;
	do {
		// Ofsset 0 = status
		j = IORD_32DIRECT(SEMAPHORE_BASE, 0);
    81d0:	00800074 	movhi	r2,1
    81d4:	10840004 	addi	r2,r2,4096
    81d8:	14000037 	ldwio	r16,0(r2)
		resumed = resumed | IORD_32DIRECT(SEMAPHORE_BASE, 4);
    81dc:	10800104 	addi	r2,r2,4
    81e0:	10800037 	ldwio	r2,0(r2)
		// Ofsset 4 = data_out, id of semaphore on creation
		alt_printf("fourth\n");
    81e4:	01000074 	movhi	r4,1
    81e8:	21216e04 	addi	r4,r4,-31304
	j = 0;
	int resumed = 0;
	do {
		// Ofsset 0 = status
		j = IORD_32DIRECT(SEMAPHORE_BASE, 0);
		resumed = resumed | IORD_32DIRECT(SEMAPHORE_BASE, 4);
    81ec:	88a2b03a 	or	r17,r17,r2
		// Ofsset 4 = data_out, id of semaphore on creation
		alt_printf("fourth\n");
    81f0:	00082dc0 	call	82dc <alt_printf>
		alt_printf("%x\n", j);
    81f4:	800b883a 	mov	r5,r16
	IOWR_32DIRECT(SEMAPHORE_BASE, 4, sid);
	IOWR_32DIRECT(SEMAPHORE_BASE, 8, 0x0);

	j = 0;
	int resumed = 0;
	do {
    81f8:	8400004c 	andi	r16,r16,1
		// Ofsset 0 = status
		j = IORD_32DIRECT(SEMAPHORE_BASE, 0);
		resumed = resumed | IORD_32DIRECT(SEMAPHORE_BASE, 4);
		// Ofsset 4 = data_out, id of semaphore on creation
		alt_printf("fourth\n");
		alt_printf("%x\n", j);
    81fc:	01000074 	movhi	r4,1
    8200:	21216904 	addi	r4,r4,-31324
	IOWR_32DIRECT(SEMAPHORE_BASE, 4, sid);
	IOWR_32DIRECT(SEMAPHORE_BASE, 8, 0x0);

	j = 0;
	int resumed = 0;
	do {
    8204:	8021003a 	cmpeq	r16,r16,zero
		// Ofsset 0 = status
		j = IORD_32DIRECT(SEMAPHORE_BASE, 0);
		resumed = resumed | IORD_32DIRECT(SEMAPHORE_BASE, 4);
		// Ofsset 4 = data_out, id of semaphore on creation
		alt_printf("fourth\n");
		alt_printf("%x\n", j);
    8208:	00082dc0 	call	82dc <alt_printf>
	IOWR_32DIRECT(SEMAPHORE_BASE, 4, sid);
	IOWR_32DIRECT(SEMAPHORE_BASE, 8, 0x0);

	j = 0;
	int resumed = 0;
	do {
    820c:	803ff01e 	bne	r16,zero,81d0 <main+0x14c>
		// Ofsset 4 = data_out, id of semaphore on creation
		alt_printf("fourth\n");
		alt_printf("%x\n", j);
	} while ((j & 0x1) != 1);

	alt_printf("%x\n", resumed);
    8210:	880b883a 	mov	r5,r17
    8214:	01000074 	movhi	r4,1
    8218:	21216904 	addi	r4,r4,-31324
    821c:	00082dc0 	call	82dc <alt_printf>
    8220:	003fff06 	br	8220 <main+0x19c>

00008224 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8224:	2900051e 	bne	r5,r4,823c <alt_load_section+0x18>
    8228:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    822c:	20800017 	ldw	r2,0(r4)
    8230:	21000104 	addi	r4,r4,4
    8234:	28800015 	stw	r2,0(r5)
    8238:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    823c:	29bffb1e 	bne	r5,r6,822c <alt_load_section+0x8>
    8240:	f800283a 	ret

00008244 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8244:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8248:	01000074 	movhi	r4,1
    824c:	21217304 	addi	r4,r4,-31284
    8250:	01400074 	movhi	r5,1
    8254:	29617004 	addi	r5,r5,-31296
    8258:	01800074 	movhi	r6,1
    825c:	31a17304 	addi	r6,r6,-31284
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8260:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8264:	00082240 	call	8224 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8268:	01000074 	movhi	r4,1
    826c:	21200804 	addi	r4,r4,-32736
    8270:	01400074 	movhi	r5,1
    8274:	29600804 	addi	r5,r5,-32736
    8278:	01800074 	movhi	r6,1
    827c:	31a00804 	addi	r6,r6,-32736
    8280:	00082240 	call	8224 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8284:	01000074 	movhi	r4,1
    8288:	21216104 	addi	r4,r4,-31356
    828c:	01400074 	movhi	r5,1
    8290:	29616104 	addi	r5,r5,-31356
    8294:	01800074 	movhi	r6,1
    8298:	31a17004 	addi	r6,r6,-31296
    829c:	00082240 	call	8224 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    82a0:	00085000 	call	8500 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    82a4:	dfc00017 	ldw	ra,0(sp)
    82a8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    82ac:	00085181 	jmpi	8518 <alt_icache_flush_all>

000082b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    82b0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    82b4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    82b8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    82bc:	00084ac0 	call	84ac <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    82c0:	00084a80 	call	84a8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    82c4:	d1200617 	ldw	r4,-32744(gp)
    82c8:	d1600717 	ldw	r5,-32740(gp)
    82cc:	d1a00817 	ldw	r6,-32736(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    82d0:	dfc00017 	ldw	ra,0(sp)
    82d4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    82d8:	00080841 	jmpi	8084 <main>

000082dc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    82dc:	defff804 	addi	sp,sp,-32
    82e0:	dfc00415 	stw	ra,16(sp)
    82e4:	dc800315 	stw	r18,12(sp)
    82e8:	dc400215 	stw	r17,8(sp)
    82ec:	dc000115 	stw	r16,4(sp)
    82f0:	d9400515 	stw	r5,20(sp)
    82f4:	d9800615 	stw	r6,24(sp)
    82f8:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
    82fc:	d8800504 	addi	r2,sp,20
    8300:	2025883a 	mov	r18,r4
    8304:	d8800015 	stw	r2,0(sp)
    8308:	00003d06 	br	8400 <alt_printf+0x124>
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    830c:	00800944 	movi	r2,37
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    8310:	94800044 	addi	r18,r18,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    8314:	18800226 	beq	r3,r2,8320 <alt_printf+0x44>
        {
            alt_putchar(c);
    8318:	1809883a 	mov	r4,r3
    831c:	00000a06 	br	8348 <alt_printf+0x6c>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    8320:	91000007 	ldb	r4,0(r18)
    8324:	94800044 	addi	r18,r18,1
    8328:	20003726 	beq	r4,zero,8408 <alt_printf+0x12c>
            {
                if (c == '%')
    832c:	20c00626 	beq	r4,r3,8348 <alt_printf+0x6c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    8330:	008018c4 	movi	r2,99
    8334:	2080061e 	bne	r4,r2,8350 <alt_printf+0x74>
                {
                    int v = va_arg(args, int);
    8338:	d8800017 	ldw	r2,0(sp)
                    alt_putchar(v);
    833c:	11000017 	ldw	r4,0(r2)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    8340:	10800104 	addi	r2,r2,4
    8344:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
    8348:	00084200 	call	8420 <alt_putchar>
    834c:	00002c06 	br	8400 <alt_printf+0x124>
                }
                else if (c == 'x')
    8350:	00801e04 	movi	r2,120
    8354:	20801e1e 	bne	r4,r2,83d0 <alt_printf+0xf4>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    8358:	d8800017 	ldw	r2,0(sp)
    835c:	14400017 	ldw	r17,0(r2)
    8360:	10800104 	addi	r2,r2,4
    8364:	d8800015 	stw	r2,0(sp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    8368:	88000226 	beq	r17,zero,8374 <alt_printf+0x98>
    836c:	04000704 	movi	r16,28
    8370:	00000306 	br	8380 <alt_printf+0xa4>
                    {
                        alt_putchar('0');
    8374:	01000c04 	movi	r4,48
    8378:	003ff306 	br	8348 <alt_printf+0x6c>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    837c:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    8380:	008003c4 	movi	r2,15
    8384:	1404983a 	sll	r2,r2,r16
    8388:	8884703a 	and	r2,r17,r2
    838c:	103ffb26 	beq	r2,zero,837c <alt_printf+0xa0>
    8390:	00000b06 	br	83c0 <alt_printf+0xe4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    8394:	8884703a 	and	r2,r17,r2
    8398:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
    839c:	00800244 	movi	r2,9
                            c = '0' + digit;
    83a0:	19000c04 	addi	r4,r3,48

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
    83a4:	10c0012e 	bgeu	r2,r3,83ac <alt_printf+0xd0>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
    83a8:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
    83ac:	21003fcc 	andi	r4,r4,255
    83b0:	2100201c 	xori	r4,r4,128
    83b4:	213fe004 	addi	r4,r4,-128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    83b8:	843fff04 	addi	r16,r16,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
    83bc:	00084200 	call	8420 <alt_putchar>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    83c0:	008003c4 	movi	r2,15
    83c4:	1404983a 	sll	r2,r2,r16
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    83c8:	803ff20e 	bge	r16,zero,8394 <alt_printf+0xb8>
    83cc:	00000c06 	br	8400 <alt_printf+0x124>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    83d0:	00801cc4 	movi	r2,115
    83d4:	20800a1e 	bne	r4,r2,8400 <alt_printf+0x124>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    83d8:	d8800017 	ldw	r2,0(sp)
    83dc:	14000017 	ldw	r16,0(r2)
    83e0:	10800104 	addi	r2,r2,4
    83e4:	d8800015 	stw	r2,0(sp)
    83e8:	00000106 	br	83f0 <alt_printf+0x114>

                    while(*s)
                      alt_putchar(*s++);
    83ec:	00084200 	call	8420 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    83f0:	80800007 	ldb	r2,0(r16)
                      alt_putchar(*s++);
    83f4:	84000044 	addi	r16,r16,1
    83f8:	1009883a 	mov	r4,r2
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    83fc:	103ffb1e 	bne	r2,zero,83ec <alt_printf+0x110>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    8400:	90c00007 	ldb	r3,0(r18)
    8404:	183fc11e 	bne	r3,zero,830c <alt_printf+0x30>
            {
                break;
            }
        }
    }
}
    8408:	dfc00417 	ldw	ra,16(sp)
    840c:	dc800317 	ldw	r18,12(sp)
    8410:	dc400217 	ldw	r17,8(sp)
    8414:	dc000117 	ldw	r16,4(sp)
    8418:	dec00804 	addi	sp,sp,32
    841c:	f800283a 	ret

00008420 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    8420:	defffd04 	addi	sp,sp,-12
    8424:	dc000115 	stw	r16,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    8428:	d80b883a 	mov	r5,sp
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    842c:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    8430:	01800044 	movi	r6,1
    8434:	01000074 	movhi	r4,1
    8438:	21217204 	addi	r4,r4,-31288
    843c:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    8440:	dfc00215 	stw	ra,8(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    8444:	dc000005 	stb	r16,0(sp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    8448:	00084cc0 	call	84cc <altera_avalon_jtag_uart_write>
    844c:	1009883a 	mov	r4,r2
    8450:	00bfffc4 	movi	r2,-1
    8454:	2080011e 	bne	r4,r2,845c <alt_putchar+0x3c>
    8458:	2021883a 	mov	r16,r4
    }
    return c;
#else
    return putchar(c);
#endif
}
    845c:	8005883a 	mov	r2,r16
    8460:	dfc00217 	ldw	ra,8(sp)
    8464:	dc000117 	ldw	r16,4(sp)
    8468:	dec00304 	addi	sp,sp,12
    846c:	f800283a 	ret

00008470 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    8470:	defffe04 	addi	sp,sp,-8
    8474:	dc000015 	stw	r16,0(sp)
    8478:	dfc00115 	stw	ra,4(sp)
    847c:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8480:	00085640 	call	8564 <strlen>
    8484:	800b883a 	mov	r5,r16
    8488:	100d883a 	mov	r6,r2
    848c:	01000074 	movhi	r4,1
    8490:	21217204 	addi	r4,r4,-31288
    8494:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    8498:	dfc00117 	ldw	ra,4(sp)
    849c:	dc000017 	ldw	r16,0(sp)
    84a0:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    84a4:	00084cc1 	jmpi	84cc <altera_avalon_jtag_uart_write>

000084a8 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
}
    84a8:	f800283a 	ret

000084ac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    84ac:	deffff04 	addi	sp,sp,-4
    84b0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
    84b4:	00085240 	call	8524 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    84b8:	00800044 	movi	r2,1
    84bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    84c0:	dfc00017 	ldw	ra,0(sp)
    84c4:	dec00104 	addi	sp,sp,4
    84c8:	f800283a 	ret

000084cc <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    84cc:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    84d0:	298f883a 	add	r7,r5,r6
    84d4:	20c00104 	addi	r3,r4,4
    84d8:	00000606 	br	84f4 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    84dc:	18800037 	ldwio	r2,0(r3)
    84e0:	10bfffec 	andhi	r2,r2,65535
    84e4:	10000326 	beq	r2,zero,84f4 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    84e8:	28800007 	ldb	r2,0(r5)
    84ec:	29400044 	addi	r5,r5,1
    84f0:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    84f4:	29fff936 	bltu	r5,r7,84dc <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    84f8:	3005883a 	mov	r2,r6
    84fc:	f800283a 	ret

00008500 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8500:	0005883a 	mov	r2,zero
    8504:	00c20004 	movi	r3,2048
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    8508:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    850c:	10800804 	addi	r2,r2,32
    8510:	10fffd1e 	bne	r2,r3,8508 <alt_dcache_flush_all+0x8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8514:	f800283a 	ret

00008518 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    8518:	0009883a 	mov	r4,zero
    851c:	01440004 	movi	r5,4096
    8520:	000852c1 	jmpi	852c <alt_icache_flush>

00008524 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8524:	000170fa 	wrctl	ienable,zero
}
    8528:	f800283a 	ret

0000852c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    852c:	00840004 	movi	r2,4096
    8530:	2007883a 	mov	r3,r4
    8534:	1140012e 	bgeu	r2,r5,853c <alt_icache_flush+0x10>
    8538:	100b883a 	mov	r5,r2
    853c:	194b883a 	add	r5,r3,r5
    8540:	00000206 	br	854c <alt_icache_flush+0x20>

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    8544:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    8548:	18c00804 	addi	r3,r3,32
    854c:	197ffd36 	bltu	r3,r5,8544 <alt_icache_flush+0x18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    8550:	208007cc 	andi	r2,r4,31
    8554:	10000126 	beq	r2,zero,855c <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    8558:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    855c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    8560:	f800283a 	ret

00008564 <strlen>:
    8564:	20800007 	ldb	r2,0(r4)
    8568:	10000526 	beq	r2,zero,8580 <strlen+0x1c>
    856c:	2007883a 	mov	r3,r4
    8570:	18c00044 	addi	r3,r3,1
    8574:	18800007 	ldb	r2,0(r3)
    8578:	103ffd1e 	bne	r2,zero,8570 <strlen+0xc>
    857c:	1905c83a 	sub	r2,r3,r4
    8580:	f800283a 	ret
